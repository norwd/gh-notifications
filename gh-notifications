#!/usr/bin/env bash
set -e

bold() {
	if [ -x "$(command -v tput)" ]
	then
		tput bold
	fi

	echo "$@"

	if [ -x "$(command -v tput)" ]
	then
		tput sgr0
	fi
}

usage() {
	case "$1" in
		view)
			echo "View and Filter GitHub Notifications"
			echo ""
			bold "USAGE"
			echo "  gh notifications view [ -h | --help ]"
			echo "  gh notifications view [ -r | --repo REPO ]"
			echo "  gh notifications view [ -t | --type TYPE ]"
			echo ""
			bold "FLAGS"
			echo "  -h, --help:         Show help for this command"
			echo "  -r, --repo REPO:    Filter by repository"
			echo "  -t, --type TYPE:    Filter by notification type"
			echo ""
			bold "TYPES"
			echo "  pulls:          pull requests"
			echo "  issues:         issues"
			echo "  invites:        repository invites"
			echo "  commits:        commits (comments or mentions)"
			echo "  discussions:    discussions"
			echo "  releases:       releases and tags"
			echo "  checks:         check suite statuses"
			echo ""
			bold "EXAMPLES"
			echo "  gh notifications view --repo github/explore"
			echo "  gh notifications view --type discussion"
			echo ""
		;;

		done)
			echo "Manage and Hide GitHub Notifications"
			echo ""
			bold "USAGE"
			echo "  gh notifications done [ -h | --help ]"
			echo "  gh notifications done [ -r | --repo REPO ]"
			echo "  gh notifications done [ -t | --type TYPE ]"
			echo "  gh notifications done [ THREADS ... ]"
			echo ""
			bold "FLAGS"
			echo "  -h, --help:    Show help for this command"
			echo ""
			bold "EXAMPLES"
			echo "  gh notifications done --repo github/explore"
			echo "  gh notifications done --type discussion"
			echo "  gh notifications done 1234,5678"
			echo ""
		;;

		*)
			echo "View and Manage GitHub Notifications"
			echo ""
			bold "USAGE"
			echo "  gh notifications <command> [flags] [args ...]"
			echo ""
			bold "COMMANDS"
			echo "  help:    Show this message"
			echo "  view:    View notification(s)"
			echo "  done:    Mark notification(s) as done"
			echo ""
			bold "FLAGS"
			echo "  -h, --help:    Show help for command"
			echo ""
			bold "EXAMPLES"
			echo ""
			echo "  gh notifications view --type pull_request"
			echo "  gh notifications done 123456789,123789560"
			echo ""
			bold "LEARN MORE"
			echo "  gh notifications <command> --help"
			echo "  gh notifications help <command>"
			echo ""
		;;
	esac
}

err() {
	if [ "${GITHUB_ACTIONS}" ]
	then
		echo "::error::$@"
	else
		echo "$@" 1>&2
	fi
}

die() {
	err "$@"
	exit 1
}

filter_is_subject_type() {
	jq "[ .[] | select( .subject.type == \"${1}\" ) ]"
}

filter_is_pull_request() {
	filter_is_subject_type "PullRequest"
}

filter_is_discussion() {
	filter_is_subject_type "Discussion"
}

filter_is_release() {
	filter_is_subject_type "Release"
}

filter_is_issue() {
	filter_is_subject_type "Issue"
}

filter_is_invite() {
	filter_is_subject_type "RepositoryInvitation"
}

filter_is_commit() {
	filter_is_subject_type "Commit"
}

filter_is_check_suite() {
	filter_is_subject_type "CheckSuite"
}

filter_by_repo_full_name() {
	jq "[ .[] | select( .repository.full_name == \"${1}\" ) ]"
}

filter_by_repo_name() {
	jq "[ .[] | select( .repository.name == \"${1}\" ) ]"
}

filter_by_repo() {
	if [ ! "${1}" ]
	then
		cat
	elif echo "${1}" | grep -iEq '^[a-z0-9_.-]+/[a-z0-9_.-]+$'
	then
		filter_by_repo_full_name
	elif echo "${1}" | grep -iEq '^[a-z0-9_.-]+$'
	then
		filter_by_repo_name "${1}"
	else
		die "invalid repository: ${1}"
	fi
}

filter_by_subject_type() {
	if [ ! "${1}" ]
	then
		cat
	else
		case "$(echo "${1}" | tr '[:upper:]' '[:lower:]')" in

			# Match possible ways of specifying the type
			p | pull       | pulls       ) filter_is_pull_request ;;
			i | issue      | issues      ) filter_is_issue        ;;
			v | invite     | invites     ) filter_is_invite       ;;
			c | commit     | commits     ) filter_is_commit       ;;
			d | discussion | discussions ) filter_is_discussion   ;;
			r | release    | releases    ) filter_is_release      ;;
			k | check      | checks      ) filter_is_check_suite  ;;

			# Anything else isn't a known type
			*) die "unknown type: ${1}" ;;
		esac
	fi
}

get_threads() {
	gh api "/notifications" | \
	filter_by_subject_type "${FILTER_TYPE}" | \
	filter_by_repo "${FILTER_REPO}"
}

tabulate_threads() {
	jq \
		--raw-output \
		'.[] | ( .repository.full_name + "|" + .subject.type + "|" + .subject.title )' | \
	column \
		--separator "|" \
		--table \
		--table-columns \
		"REPOSITORY,NOTIFICATION TYPE,TITLE"
}

main_view() {
	get_threads | tabulate_threads
}

main_done() {
	# TODO: get_threads | mark_threads_as_done
	die "UNIMPLEMENTED"
}

main() {
	# Show usage if nothing was requested
	if [ "$#" -lt 1 ]
	then
		usage
		exit 1
	fi

	# Take the first arg as the subcommand to run
	COMMAND="$1"
	shift

	# Validate that the subcommand is known (or asking for help)
	case "$COMMAND" in
		-h | --help | help ) usage "$1" ; exit ;;
		view | done        ) ;; # Command is known, carry on
		*                  ) usage ; die "unknown command '$COMMAND'" ;;
	esac

	# Parse common arguments
	while [ "$#" -gt 0 ]
	do
		case "$1" in
			-h   | --help   ) usage "${COMMAND}"    ; exit  ;;

			-r   | --repo   ) FILTER_REPO="$2"      ; shift ;;
			-r=* | --repo=* ) FILTER_REPO="${1#*=}" ;       ;;

			-t   | --type   ) FILTER_TYPE="$2"      ; shift ;;
			-t=* | --type=* ) FILTER_TYPE="${1#*=}" ;       ;;

			-* ) die "unknown option '$1'"   ;;
			*  ) break ;; # stop loop, remaining args go to command
		esac

		shift
	done

	# Run the selected command and pass through remaining args
	"main_${COMMAND}" $*
}

main $@

